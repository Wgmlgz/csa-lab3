Debug output enabled.
argument list ['./src/main.py', './examples/sus/test.lsp', '-c', '-r', '-d', '-i']
Tokenizing: (
  (fn print_u64 (n u64) (
    (let cur 100000000)
    (let base 10)
    (let zero 48)

    (while cur (
      (local_get n)
      (div_local cur)
      (rem_local base)
      (add_local zero)
      (out 1)

      (local_get cur)
      (div_local base)
      (local_set cur)))))
  
  ;; (fn factorial (n u64) u64  
  ;;   (if (eq n 0)
  ;;     1
  ;;     (mul n (factorial (sub n 1)))))

  ;; (fn fib (n u64) u64  
  ;;   (if (eq n 0) 0
  ;;   (if (eq n 1) 1
  ;;     (add (fib (sub n 1)) (fib (sub n 2))))))
  ;; ;; (fn ttt (n u64) u64 (if (eq n 0) 2 3))
  ;; ;; (let a (if 0 2 3))
  ;; ;; (let b (factorial 5))
  ;; (let b (fib 18))
  ;; 0 1 1 2 3 5 8 13 21
  ;; 0 1 2 3 4 5 6 7  8  9
  ;; (print_u64 a)
  (print_u64 228)
  (halt)
)
[`(`.TokenType.OPEN@0,
 `(`.TokenType.OPEN@4,
 `fn`.TokenType.ID@5,
 `print_u64`.TokenType.ID@8,
 `(`.TokenType.OPEN@18,
 `n`.TokenType.ID@19,
 `u64`.TokenType.ID@21,
 `)`.TokenType.CLOSE@24,
 `(`.TokenType.OPEN@26,
 `(`.TokenType.OPEN@32,
 `let`.TokenType.ID@33,
 `cur`.TokenType.ID@37,
 `100000000`.TokenType.INT@41,
 `)`.TokenType.CLOSE@50,
 `(`.TokenType.OPEN@56,
 `let`.TokenType.ID@57,
 `base`.TokenType.ID@61,
 `10`.TokenType.INT@66,
 `)`.TokenType.CLOSE@68,
 `(`.TokenType.OPEN@74,
 `let`.TokenType.ID@75,
 `zero`.TokenType.ID@79,
 `48`.TokenType.INT@84,
 `)`.TokenType.CLOSE@86,
 `(`.TokenType.OPEN@93,
 `while`.TokenType.ID@94,
 `cur`.TokenType.ID@100,
 `(`.TokenType.OPEN@104,
 `(`.TokenType.OPEN@112,
 `local_get`.TokenType.ID@113,
 `n`.TokenType.ID@123,
 `)`.TokenType.CLOSE@124,
 `(`.TokenType.OPEN@132,
 `div_local`.TokenType.ID@133,
 `cur`.TokenType.ID@143,
 `)`.TokenType.CLOSE@146,
 `(`.TokenType.OPEN@154,
 `rem_local`.TokenType.ID@155,
 `base`.TokenType.ID@165,
 `)`.TokenType.CLOSE@169,
 `(`.TokenType.OPEN@177,
 `add_local`.TokenType.ID@178,
 `zero`.TokenType.ID@188,
 `)`.TokenType.CLOSE@192,
 `(`.TokenType.OPEN@200,
 `out`.TokenType.ID@201,
 `1`.TokenType.INT@205,
 `)`.TokenType.CLOSE@206,
 `(`.TokenType.OPEN@215,
 `local_get`.TokenType.ID@216,
 `cur`.TokenType.ID@226,
 `)`.TokenType.CLOSE@229,
 `(`.TokenType.OPEN@237,
 `div_local`.TokenType.ID@238,
 `base`.TokenType.ID@248,
 `)`.TokenType.CLOSE@252,
 `(`.TokenType.OPEN@260,
 `local_set`.TokenType.ID@261,
 `cur`.TokenType.ID@271,
 `)`.TokenType.CLOSE@274,
 `)`.TokenType.CLOSE@275,
 `)`.TokenType.CLOSE@276,
 `)`.TokenType.CLOSE@277,
 `)`.TokenType.CLOSE@278,
 `(`.TokenType.OPEN@709,
 `print_u64`.TokenType.ID@710,
 `228`.TokenType.INT@720,
 `)`.TokenType.CLOSE@723,
 `(`.TokenType.OPEN@727,
 `halt`.TokenType.ID@728,
 `)`.TokenType.CLOSE@732,
 `)`.TokenType.CLOSE@734]
Exp:
  Exp:
    Id(fn)
    Id(print_u64)
    Exp:
      Id(n)
      Id(u64)
    Exp:
      Exp:
        Id(let)
        Id(cur)
        Int(100000000)
      Exp:
        Id(let)
        Id(base)
        Int(10)
      Exp:
        Id(let)
        Id(zero)
        Int(48)
      Exp:
        Id(while)
        Id(cur)
        Exp:
          Exp:
            Id(local_get)
            Id(n)
          Exp:
            Id(div_local)
            Id(cur)
          Exp:
            Id(rem_local)
            Id(base)
          Exp:
            Id(add_local)
            Id(zero)
          Exp:
            Id(out)
            Int(1)
          Exp:
            Id(local_get)
            Id(cur)
          Exp:
            Id(div_local)
            Id(base)
          Exp:
            Id(local_set)
            Id(cur)
  Exp:
    Id(print_u64)
    Int(228)
  Exp:
    Id(halt)
compiled, unresolved:
Block -> ()[0] at o.1
  EmptyScope
[
  Block -> ((u64)) -> ()[8] at o.22
    EmptyScope
  [
    cmd->acc print_u64.7
    local_set o.22
  ] glob code: [
    print_u64.7
    Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
      Scope:
        ret_addr: u64[8] at o.5:b'\xff\xff\xff\xf8'
        n: u64[8] at o.6:b'\xff\xff\xff\xf0'
    [
      Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
        Scope:
          cur: u64[8] at o.8:b'\xff\xff\xff\xe8'
          base: u64[8] at o.11:b'\xff\xff\xff\xe0'
          zero: u64[8] at o.14:b'\xff\xff\xff\xd8'
      [
        Block -> u64[8] at o.8:b'\xff\xff\xff\xe8'
          EmptyScope
        [
          cmd->acc o.10:b'\x05\xf5\xe1\x00'
          local_set o.8:b'\xff\xff\xff\xe8'
        ]
        Block -> u64[8] at o.11:b'\xff\xff\xff\xe0'
          EmptyScope
        [
          cmd->acc o.13:b'\x00\x00\x00\n'
          local_set o.11:b'\xff\xff\xff\xe0'
        ]
        Block -> u64[8] at o.14:b'\xff\xff\xff\xd8'
          EmptyScope
        [
          cmd->acc o.16:b'\x00\x00\x000'
          local_set o.14:b'\xff\xff\xff\xd8'
        ]
        Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
          EmptyScope
        [
          o.20
          Block -> u64[8] at o.17:b'\xff\xff\xff\xd0'
            EmptyScope
          [
            local_get o.8:b'\xff\xff\xff\xe8'
            local_set o.17:b'\xff\xff\xff\xd0'
          ]
          local_get o.17:b'\xff\xff\xff\xd0'
          jmp_if_false o.21
          Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
            EmptyScope
          [
            local_get o.6:b'\xff\xff\xff\xf0'
            div_local o.8:b'\xff\xff\xff\xe8'
            rem_local o.11:b'\xff\xff\xff\xe0'
            add_local o.14:b'\xff\xff\xff\xd8'
            out o.19:b'\x00\x00\x00\x01'
            local_get o.8:b'\xff\xff\xff\xe8'
            div_local o.11:b'\xff\xff\xff\xe0'
            local_set o.8:b'\xff\xff\xff\xe8'
          ]
          jmp o.20
          o.21
        ]
      ]
      local_get o.5:b'\xff\xff\xff\xf8'
      jmp_acc
    ]
  ]
  Block -> ()[0] at o.24
    Scope:
      ret_addr: u64[8] at o.26
      _arg0: u64[8] at o.28
  [
    cmd->acc o.27
    local_set o.26
    Block -> u64[8] at o.28
      EmptyScope
    [
      cmd->acc o.29:b'\x00\x00\x00\xe4'
      local_set o.28
    ]
    shift_stack o.25
    jmp print_u64.7
    o.27
    unshift_stack o.25
  ]
  halt
]
compiled, resolved:
Block -> ()[0] at o.1:b'\x00\x00\x00\x00'
  EmptyScope
[
  Block -> ((u64)) -> ()[8] at o.22:b'\xff\xff\xff\xf8'
    EmptyScope
  [
    cmd->acc print_u64.7
    local_set o.22:b'\xff\xff\xff\xf8'
  ] glob code: [
    print_u64.7
    Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
      Scope:
        ret_addr: u64[8] at o.5:b'\xff\xff\xff\xf8'
        n: u64[8] at o.6:b'\xff\xff\xff\xf0'
    [
      Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
        Scope:
          cur: u64[8] at o.8:b'\xff\xff\xff\xe8'
          base: u64[8] at o.11:b'\xff\xff\xff\xe0'
          zero: u64[8] at o.14:b'\xff\xff\xff\xd8'
      [
        Block -> u64[8] at o.8:b'\xff\xff\xff\xe8'
          EmptyScope
        [
          cmd->acc o.10:b'\x05\xf5\xe1\x00'
          local_set o.8:b'\xff\xff\xff\xe8'
        ]
        Block -> u64[8] at o.11:b'\xff\xff\xff\xe0'
          EmptyScope
        [
          cmd->acc o.13:b'\x00\x00\x00\n'
          local_set o.11:b'\xff\xff\xff\xe0'
        ]
        Block -> u64[8] at o.14:b'\xff\xff\xff\xd8'
          EmptyScope
        [
          cmd->acc o.16:b'\x00\x00\x000'
          local_set o.14:b'\xff\xff\xff\xd8'
        ]
        Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
          EmptyScope
        [
          o.20
          Block -> u64[8] at o.17:b'\xff\xff\xff\xd0'
            EmptyScope
          [
            local_get o.8:b'\xff\xff\xff\xe8'
            local_set o.17:b'\xff\xff\xff\xd0'
          ]
          local_get o.17:b'\xff\xff\xff\xd0'
          jmp_if_false o.21
          Block -> ()[0] at o.3:b'\x00\x00\x00\x00'
            EmptyScope
          [
            local_get o.6:b'\xff\xff\xff\xf0'
            div_local o.8:b'\xff\xff\xff\xe8'
            rem_local o.11:b'\xff\xff\xff\xe0'
            add_local o.14:b'\xff\xff\xff\xd8'
            out o.19:b'\x00\x00\x00\x01'
            local_get o.8:b'\xff\xff\xff\xe8'
            div_local o.11:b'\xff\xff\xff\xe0'
            local_set o.8:b'\xff\xff\xff\xe8'
          ]
          jmp o.20
          o.21
        ]
      ]
      local_get o.5:b'\xff\xff\xff\xf8'
      jmp_acc
    ]
  ]
  Block -> ()[0] at o.24:b'\x00\x00\x00\x00'
    Scope:
      ret_addr: u64[8] at o.26:b'\xff\xff\xff\xf8'
      _arg0: u64[8] at o.28:b'\xff\xff\xff\xf0'
  [
    cmd->acc o.27
    local_set o.26:b'\xff\xff\xff\xf8'
    Block -> u64[8] at o.28:b'\xff\xff\xff\xf0'
      EmptyScope
    [
      cmd->acc o.29:b'\x00\x00\x00\xe4'
      local_set o.28:b'\xff\xff\xff\xf0'
    ]
    shift_stack o.25:b'\x00\x00\x00\x00'
    jmp print_u64.7
    o.27
    unshift_stack o.25:b'\x00\x00\x00\x00'
  ]
  halt
]
compiled, resolved, unlinked:
[cmd->acc print_u64.7,
 local_set o.22:b'\xff\xff\xff\xf8',
 cmd->acc o.27,
 local_set o.26:b'\xff\xff\xff\xf8',
 cmd->acc o.29:b'\x00\x00\x00\xe4',
 local_set o.28:b'\xff\xff\xff\xf0',
 shift_stack o.25:b'\x00\x00\x00\x00',
 jmp print_u64.7,
 o.27,
 unshift_stack o.25:b'\x00\x00\x00\x00',
 halt,
 print_u64.7,
 cmd->acc o.10:b'\x05\xf5\xe1\x00',
 local_set o.8:b'\xff\xff\xff\xe8',
 cmd->acc o.13:b'\x00\x00\x00\n',
 local_set o.11:b'\xff\xff\xff\xe0',
 cmd->acc o.16:b'\x00\x00\x000',
 local_set o.14:b'\xff\xff\xff\xd8',
 o.20,
 local_get o.8:b'\xff\xff\xff\xe8',
 local_set o.17:b'\xff\xff\xff\xd0',
 local_get o.17:b'\xff\xff\xff\xd0',
 jmp_if_false o.21,
 local_get o.6:b'\xff\xff\xff\xf0',
 div_local o.8:b'\xff\xff\xff\xe8',
 rem_local o.11:b'\xff\xff\xff\xe0',
 add_local o.14:b'\xff\xff\xff\xd8',
 out o.19:b'\x00\x00\x00\x01',
 local_get o.8:b'\xff\xff\xff\xe8',
 div_local o.11:b'\xff\xff\xff\xe0',
 local_set o.8:b'\xff\xff\xff\xe8',
 jmp o.20,
 o.21,
 local_get o.5:b'\xff\xff\xff\xf8',
 jmp_acc]
compiled, resolved to instructions (0xf8):
[cmd->acc print_u64.7:b'\x00\x00\x00P',
 local_set o.22:b'\xff\xff\xff\xf8',
 cmd->acc o.27:b'\x00\x00\x00@',
 local_set o.26:b'\xff\xff\xff\xf8',
 cmd->acc o.29:b'\x00\x00\x00\xe4',
 local_set o.28:b'\xff\xff\xff\xf0',
 shift_stack o.25:b'\x00\x00\x00\x00',
 jmp print_u64.7:b'\x00\x00\x00P',
 unshift_stack o.25:b'\x00\x00\x00\x00',
 halt,
 cmd->acc o.10:b'\x05\xf5\xe1\x00',
 local_set o.8:b'\xff\xff\xff\xe8',
 cmd->acc o.13:b'\x00\x00\x00\n',
 local_set o.11:b'\xff\xff\xff\xe0',
 cmd->acc o.16:b'\x00\x00\x000',
 local_set o.14:b'\xff\xff\xff\xd8',
 local_get o.8:b'\xff\xff\xff\xe8',
 local_set o.17:b'\xff\xff\xff\xd0',
 local_get o.17:b'\xff\xff\xff\xd0',
 jmp_if_false o.21:b'\x00\x00\x00\xe8',
 local_get o.6:b'\xff\xff\xff\xf0',
 div_local o.8:b'\xff\xff\xff\xe8',
 rem_local o.11:b'\xff\xff\xff\xe0',
 add_local o.14:b'\xff\xff\xff\xd8',
 out o.19:b'\x00\x00\x00\x01',
 local_get o.8:b'\xff\xff\xff\xe8',
 div_local o.11:b'\xff\xff\xff\xe0',
 local_set o.8:b'\xff\xff\xff\xe8',
 jmp o.20:b'\x00\x00\x00\x80',
 local_get o.5:b'\xff\xff\xff\xf8',
 jmp_acc]
module exp:
Exp:
  Exp:
    Id(fn)
    Id(print_u64)
    Exp:
      Id(n)
      Id(u64)
    Exp:
      Exp:
        Id(let)
        Id(cur)
        Int(100000000)
      Exp:
        Id(let)
        Id(base)
        Int(10)
      Exp:
        Id(let)
        Id(zero)
        Int(48)
      Exp:
        Id(while)
        Id(cur)
        Exp:
          Exp:
            Id(local_get)
            Id(n)
          Exp:
            Id(div_local)
            Id(cur)
          Exp:
            Id(rem_local)
            Id(base)
          Exp:
            Id(add_local)
            Id(zero)
          Exp:
            Id(out)
            Int(1)
          Exp:
            Id(local_get)
            Id(cur)
          Exp:
            Id(div_local)
            Id(base)
          Exp:
            Id(local_set)
            Id(cur)
  Exp:
    Id(print_u64)
    Int(228)
  Exp:
    Id(halt)
Machine(AmogusPC):
  Memory at ip:
    0x0   :0000000300000050
    0x8   :0000000dfffffff8
    0x10  :0000000300000040
    0x18  :0000000dfffffff8
    0x20  :00000003000000e4
    0x28  :0000000dfffffff0
    0x30  :0000000b00000000
    0x38  :0000001900000050
  Memory at ptr:
    0x0   :0000000300000050
    0x8   :0000000dfffffff8
    0x10  :0000000300000040
    0x18  :0000000dfffffff8
    0x20  :00000003000000e4
    0x28  :0000000dfffffff0
    0x30  :0000000b00000000
    0x38  :0000001900000050
  Memory at stack:
    0xffc0:0000000000000000
    0xffc8:0000000000000000
    0xffd0:0000000000000000
    0xffd8:0000000000000000
    0xffe0:0000000000000000
    0xffe8:0000000000000000
    0xfff0:0000000000000000
    0xfff8:0000000000000000  
CPU:
  acc:0000000000000000   ptr:0000000000000000 cmd:0000000000000000
   ip:0000000000000000 stack:0000000000010000   
stdin:
    amogus test
    ^  
stdout:
    
    ^
instruction fetch...
exec...
cmd->acc <computer.microcode.Microcode object at 0x10299a850>
Machine(AmogusPC):
  Memory at ip:
    0x0   :0000000300000050
    0x8   :0000000dfffffff8
    0x10  :0000000300000040
    0x18  :0000000dfffffff8
    0x20  :00000003000000e4
    0x28  :0000000dfffffff0
    0x30  :0000000b00000000
    0x38  :0000001900000050
  Memory at ptr:
    0x0   :0000000300000050
    0x8   :0000000dfffffff8
    0x10  :0000000300000040
    0x18  :0000000dfffffff8
    0x20  :00000003000000e4
    0x28  :0000000dfffffff0
    0x30  :0000000b00000000
    0x38  :0000001900000050
  Memory at stack:
    0xffc0:0000000000000000
    0xffc8:0000000000000000
    0xffd0:0000000000000000
    0xffd8:0000000000000000
    0xffe0:0000000000000000
    0xffe8:0000000000000000
    0xfff0:0000000000000000
    0xfff8:0000000000000000  
CPU:
  acc:0000000000000050   ptr:0000000000000000 cmd:0000000300000050
   ip:0000000000000000 stack:0000000000010000   
stdin:
    amogus test
    ^  
stdout:
    
    ^
press any key to continue...